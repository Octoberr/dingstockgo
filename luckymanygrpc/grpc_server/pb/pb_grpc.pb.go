// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dispense_OnStreamMsg_FullMethodName = "/grpc_server.Dispense/OnStreamMsg"
)

// DispenseClient is the client API for Dispense service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispenseClient interface {
	OnStreamMsg(ctx context.Context, in *StreamMsg, opts ...grpc.CallOption) (*Null, error)
}

type dispenseClient struct {
	cc grpc.ClientConnInterface
}

func NewDispenseClient(cc grpc.ClientConnInterface) DispenseClient {
	return &dispenseClient{cc}
}

func (c *dispenseClient) OnStreamMsg(ctx context.Context, in *StreamMsg, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Dispense_OnStreamMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispenseServer is the server API for Dispense service.
// All implementations must embed UnimplementedDispenseServer
// for forward compatibility
type DispenseServer interface {
	OnStreamMsg(context.Context, *StreamMsg) (*Null, error)
	mustEmbedUnimplementedDispenseServer()
}

// UnimplementedDispenseServer must be embedded to have forward compatible implementations.
type UnimplementedDispenseServer struct {
}

func (UnimplementedDispenseServer) OnStreamMsg(context.Context, *StreamMsg) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStreamMsg not implemented")
}
func (UnimplementedDispenseServer) mustEmbedUnimplementedDispenseServer() {}

// UnsafeDispenseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispenseServer will
// result in compilation errors.
type UnsafeDispenseServer interface {
	mustEmbedUnimplementedDispenseServer()
}

func RegisterDispenseServer(s grpc.ServiceRegistrar, srv DispenseServer) {
	s.RegisterService(&Dispense_ServiceDesc, srv)
}

func _Dispense_OnStreamMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenseServer).OnStreamMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispense_OnStreamMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenseServer).OnStreamMsg(ctx, req.(*StreamMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispense_ServiceDesc is the grpc.ServiceDesc for Dispense service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispense_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.Dispense",
	HandlerType: (*DispenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnStreamMsg",
			Handler:    _Dispense_OnStreamMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}
